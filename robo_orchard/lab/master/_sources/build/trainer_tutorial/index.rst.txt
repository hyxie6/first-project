:orphan:

Trainer Tutorials
==================

This tutorial will guide you through understanding and customizing the training pipeline in **RoboOrchardLab**,
using the provided `ResNet50 on ImageNet example <https://github.com/HorizonRobotics/robo_orchard_lab/tree/master/examples/resnet50_imagenet>`_
as our foundation. We'll start with the basics of running the script and gradually delve into customizing each component.

Here are the key highlights:

* Configuration-Driven (Pydantic + Argparse): Uses Pydantic (SettingConfig, DatasetConfig, TrainerConfig) for typed, validated, and hierarchical configurations. This is excellent for clarity, reducing errors, and IDE support.

* Hugging Face Accelerator Integration: Uses Accelerator for abstracting device management (CPU/GPU/TPU), distributed training (DDP, FSDP, etc.), and mixed precision.

* Modular Training Pipeline: A clear abstraction for the main training loop, encapsulating the core logic. A hook system allows injecting custom logic at various points in the training loop without modifying the pipeline core.



.. raw:: html

    <div class="sphx-glr-thumbnails">

.. thumbnail-parent-div-open

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Configuration &amp; Your First Basic Training Run">

.. only:: html

  .. image:: /build/trainer_tutorial/images/thumb/sphx_glr_nonb-01_basic_run_thumb.png
    :alt:

  :ref:`sphx_glr_build_trainer_tutorial_nonb-01_basic_run.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Configuration & Your First Basic Training Run</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Hooks are the primary way to add custom behavior to the training or evaluation loop without modifying its source code. They are called at specific points during training or evaluation (e.g., end of epoch, after a step).">

.. only:: html

  .. image:: /build/trainer_tutorial/images/thumb/sphx_glr_nonb-02_built_in_hooks_thumb.png
    :alt:

  :ref:`sphx_glr_build_trainer_tutorial_nonb-02_built_in_hooks.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Leveraging Built-in Hooks for Common Training Tasks</div>
    </div>


.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="This tutorial will guide you through: 1. Understanding the core components: PipelineHooksConfig, PipelineHooks, HookContext, and PipelineHookArgs. 2. Creating a custom hook class that bundles logging logic for different training stages. 3. Configuring and instantiating your custom hook. 4. (Simulated) Seeing how this hook would interact with a training engine.">

.. only:: html

  .. image:: /build/trainer_tutorial/images/thumb/sphx_glr_nonb-03_custom_hook_thumb.png
    :alt:

  :ref:`sphx_glr_build_trainer_tutorial_nonb-03_custom_hook.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">(Advanced) Creating Custom Hooks for Tailored Logic</div>
    </div>


.. thumbnail-parent-div-close

.. raw:: html

    </div>


.. toctree::
   :hidden:

   /build/trainer_tutorial/nonb-01_basic_run
   /build/trainer_tutorial/nonb-02_built_in_hooks
   /build/trainer_tutorial/nonb-03_custom_hook



.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
