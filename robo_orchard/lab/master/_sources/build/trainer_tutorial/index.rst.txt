:orphan:

Trainer Tutorials
==================

This tutorial will guide you through understanding and customizing the training pipeline in robo_orchard_lab, using the provided [ResNet50 on ImageNet example](https://github.com/HorizonRobotics/robo_orchard_lab/tree/master/examples/resnet50_imagenet) as our foundation. We'll start with the basics of running the script and gradually delve into customizing each component.

Here are the key highlights:

- Configuration-Driven (Pydantic + Argparse): Uses Pydantic (SettingConfig, DatasetConfig, TrainerConfig) for typed, validated, and hierarchical configurations. This is excellent for clarity, reducing errors, and IDE support.

- Hugging Face Accelerator Integration: Uses Accelerator for abstracting device management (CPU/GPU/TPU), distributed training (DDP, FSDP, etc.), and mixed precision.

- Modular Training Pipeline: A clear abstraction for the main training loop, encapsulating the core logic. A hook system allows injecting custom logic at various points in the training loop without modifying the pipeline core.



.. raw:: html

    <div class="sphx-glr-thumbnails">

.. thumbnail-parent-div-open

.. raw:: html

    <div class="sphx-glr-thumbcontainer" tooltip="Mastering Your Training Pipeline">

.. only:: html

  .. image:: /build/trainer_tutorial/images/thumb/sphx_glr_nonb-01_basic_example_thumb.png
    :alt:

  :ref:`sphx_glr_build_trainer_tutorial_nonb-01_basic_example.py`

.. raw:: html

      <div class="sphx-glr-thumbnail-title">Mastering Your Training Pipeline</div>
    </div>


.. thumbnail-parent-div-close

.. raw:: html

    </div>


.. toctree::
   :hidden:

   /build/trainer_tutorial/nonb-01_basic_example



.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
